{
  "wire_types": [
    {
      "name": "Int",
      "doc": "An integer"
    },
    {
      "name": "Bool",
      "doc": "A boolean"
    },
    {
      "name": "Identifier",
      "doc": "An identifier for a DAG node.\nConcrete type should be Int|String|list(Int|String)."
    },
    {
      "name": "Ref",
      "doc": "A reference to a previous identifier."
    },
    {
      "name": "String",
      "doc": "A UTF8 string"
    },
    {
      "name": "Bytes",
      "doc": "A binary blob"
    },
    {
      "name": "List",
      "doc": "A list"
    },
    {
      "name": "Option",
      "doc": "An optional."
    },
    {
      "name": "Tuple",
      "doc": "A tuple of arguments"
    }
  ],
  "dag_types": [
    {
      "name": "Const",
      "doc": "A literal constant (integer, float, etc.)."
    },
    {
      "name": "Var",
      "doc": "A term variable."
    },
    {
      "name": "FunDefID",
      "doc": "A reference to a function or constant symbol."
    },
    {
      "name": "TypeDefID",
      "doc": "A reference to a type definition."
    },
    {
      "name": "Term",
      "doc": "A term."
    },
    {
      "name": "Type",
      "doc": "A type."
    },
    {
      "name": "Clause",
      "doc": "A classical clause made of terms."
    },
    {
      "name": "Scope",
      "doc": "A scope for assumptions, used for natural deduction."
    },
    {
      "name": "MSeq",
      "doc": "A meta-sequent (sequent-of-sequents), with one conclusion and a list of premises."
    },
    {
      "name": "ProofStep",
      "doc": "A proof step, proving a clause using logical rules."
    },
    {
      "name": "MProofStep",
      "doc": "A meta-level proof step, proving a meta-sequent."
    }
  ],
  "dag_type_defs": [
    {
      "name": "FunDef",
      "doc": "A defined function.",
      "def": {
        "struct": [
          {
            "field": "id",
            "type": "FunDefID"
          },
          {
            "field": "name",
            "type": "String"
          },
          {
            "field": "args",
            "type": [
              "List",
              "Type"
            ]
          },
          {
            "field": "ret",
            "type": "Type"
          },
          {
            "field": "body",
            "type": "Term"
          }
        ]
      }
    }
  ],
  "dag_terms": [
    {
      "name": "scope.enter",
      "doc": "Enter a new scope, child of a previous scope (or `0` for the root scope).",
      "args": [
        "Scope"
      ],
      "ret": "Scope"
    },
    {
      "name": "ty.decl",
      "args": [
        "String",
        "Int"
      ],
      "ret": "TypeDefID",
      "doc": "Declares a type constructor with given arity."
    },
    {
      "name": "fun.decl",
      "args": [
        "FunDefID",
        [
          "List",
          "Type"
        ],
        "Type"
      ],
      "ret": "FunDefID",
      "doc": "Declares a function symbol `f : args -> ret`."
    },
    {
      "name": "fun.def",
      "args": [
        "String",
        [
          "List",
          "Var"
        ],
        "Type",
        "Term"
      ],
      "ret": "FunDefID",
      "doc": "Defines a function `f args : ret := body`."
    },
    {
      "name": "fun.defs",
      "args": [
        [
          "List",
          [
            "Tuple",
            "String",
            [
              "List",
              "Var"
            ],
            "Type",
            "Term"
          ]
        ]
      ],
      "ret": [
        "List",
        "FunDefID"
      ],
      "doc": "Defines a set of mutually recursive functions. Each tuple is a regular function definition."
    },
    {
      "name": "cn.int",
      "ret": "Const",
      "args": [
        "Int"
      ],
      "doc": "An integer literal."
    },
    {
      "name": "cn.z",
      "ret": "Const",
      "args": [
        "Bytes"
      ],
      "doc": "A bigint, serialized to bytes with zigzag encoding."
    },
    {
      "name": "cn.q",
      "ret": "Const",
      "args": [
        "Bytes",
        "Bytes"
      ],
      "doc": "A rational, as a pair of bigints."
    },
    {
      "name": "cn.string",
      "ret": "Const",
      "args": [
        "String"
      ],
      "doc": "A string literal."
    },
    {
      "name": "var",
      "ret": "Var",
      "args": [
        "String",
        "Type"
      ],
      "doc": "A variable."
    },
    {
      "name": "t.cn",
      "ret": "Term",
      "args": [
        "Const"
      ],
      "doc": "A literal constant term."
    },
    {
      "name": "t.bool",
      "ret": "Term",
      "args": [
        "Bool"
      ],
      "doc": "A boolean literal term (true or false)."
    },
    {
      "name": "t.@",
      "full_name": "t.app",
      "ret": "Term",
      "args": [
        "FunDefID",
        [
          "List",
          "Type"
        ],
        [
          "List",
          "Term"
        ]
      ],
      "doc": "An application."
    },
    {
      "name": "t.b",
      "full_name": "t.builtin",
      "ret": "Term",
      "args": [
        "String",
        [
          "List",
          "Type"
        ],
        [
          "List",
          "Term"
        ]
      ],
      "doc": "An application of a builtin symbol."
    },
    {
      "name": "t.v",
      "full_name": "t.var",
      "ret": "Term",
      "args": [
        "Var"
      ],
      "doc": "A free variable."
    },
    {
      "name": "t.if",
      "ret": "Term",
      "args": [
        "Term",
        "Term",
        "Term"
      ],
      "doc": "A conditional term (if/then/else)."
    },
    {
      "name": "t.cs",
      "ret": "Term",
      "args": [
        "FunDefID",
        [
          "List",
          "Type"
        ],
        [
          "List",
          "Term"
        ]
      ],
      "doc": "A constructor term (takes cstor, type params, argument list)."
    },
    {
      "name": "t.isa",
      "ret": "Term",
      "args": [
        "FunDefID",
        "Term"
      ],
      "doc": "A cstor-testing term (takes the constructor and the term to test)"
    },
    {
      "name": "t.destr",
      "ret": "Term",
      "args": [
        "FunDefID",
        [
          "List",
          "Type"
        ],
        "Int",
        "Term"
      ],
      "doc": "A construct destruction (takes cstor, type parameters, argument index, destructed term)."
    },
    {
      "name": "clause",
      "ret": "Clause",
      "args": [
        [
          "List",
          "Term"
        ]
      ],
      "doc": "Build a sequent from premises and conclusions"
    },
    {
      "name": "mseq",
      "ret": "MSeq",
      "args": [
        [
          "List",
          "Clause"
        ],
        "Clause"
      ],
      "doc": "Build a meta-sequent from premises and conclusion"
    },
    {
      "name": "ty.v",
      "full_name": "ty.var",
      "ret": "Type",
      "args": [
        "String"
      ],
      "doc": "A type variable."
    },
    {
      "name": "ty.@",
      "full_name": "ty.app",
      "ret": "Type",
      "args": [
        "String",
        [
          "List",
          "Type"
        ]
      ],
      "doc": "A type constructor applied to arguments, e.g `list(int)`."
    },
    {
      "name": "ty.b",
      "full_name": "ty.builtin",
      "ret": "Type",
      "args": [
        "String",
        [
          "List",
          "Type"
        ]
      ],
      "doc": "A builtin type constructor, e.g `int`."
    },
    {
      "name": "ty.arr",
      "ret": "Type",
      "args": [
        [
          "List",
          "Type"
        ],
        "Type"
      ],
      "doc": "An arrow type `args -> ret`."
    },
    {
      "name": "p.assume",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "Takes `t` and returns `|- t`, adding it to assumptions in the given scope."
    },
    {
      "name": "p.by-def",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term",
        "Term"
      ],
      "doc": "Takes `f(t1…tn)` and `body_f[t1…tn]` and asserts `|- f(t1…tn) = body_f[t1…tn]` when `f = λx1…xn. body_f[x1…xn]`."
    },
    {
      "name": "p.lemma",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term",
        "Clause"
      ],
      "doc": "Takes `p(t1…tn)` and `body_p`, where `p(x1…xn) := body_p[x1…xn]` is a previously proved theorem, and asserts `|- body_p[t1…tn]`"
    },
    {
      "name": "p.sorry",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Clause"
      ],
      "doc": "Takes `G ?- t` and returns `G |- t`. This is a hole in the proof, only useful as a temporary placeholder while looking for a real proof."
    },
    {
      "name": "p.cc",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Clause"
      ],
      "doc": "Takes `hyps ?- t=u` and proves `hyps |- t=u` by congruence closure."
    },
    {
      "name": "p.intros",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Clause"
      ],
      "doc": "Takes `hyps ?- (t1…tn => u)`,\n returns `box (hyps, t1…tn |- u) |- box (hyps |- (t1…tn => u))`."
    },
    {
      "name": "p.unintros",
      "ret": "ProofStep",
      "args": [
        "Scope",
        [
          "List",
          "Term"
        ],
        "Clause"
      ],
      "doc": "Takes `{i1…in}, (H_{i1…in} U other_hyps ?- u)` and returns `box (other_hyps ?- (hyps_{i1} / … / H_n) ==> u)) |- box (H_{i1…in} |- u)`."
    },
    {
      "name": "p.if-true",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "`if+ (if a b c)` is `a=true |- (if a b c) = b`."
    },
    {
      "name": "p.if-false",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "`if- (if a b c)` is `a=false |- (if a b c) = c`."
    },
    {
      "name": "p.if-trivial",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "`b=true, c=false |- (if a b c) = a`."
    },
    {
      "name": "p.if-trivial-neg",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "`b=false, c=true |- (if a b c) = not a`."
    },
    {
      "name": "p.trivial",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Clause"
      ],
      "doc": "`trivial (G,t |- t, _)` proves `box (G,t|-t, …)`"
    },
    {
      "name": "p.and-elim",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Clause",
        "Clause"
      ],
      "doc": "Takes `G1 ?- a` and `G2 ?- b`,\n   produces a proof of `box (G1 |- a), box (G2 |- b) |- box (G1, G2 |- a && b)`."
    },
    {
      "name": "p.or-left",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Clause",
        "Term"
      ],
      "doc": "Takes `G ?- a` and `b`, produces a proof of `box (G |- a) |- box (G |- a || b)`."
    },
    {
      "name": "p.or-right",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Clause",
        "Term"
      ],
      "doc": "Takes `G ?- b` and `a`, produces a proof of `box (G |- b) |- box (G |- a || b)`."
    },
    {
      "name": "p.cstor-inj",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term",
        "Term",
        "Int"
      ],
      "doc": "Given terms `t := C(t1…tn)` and `u := C(u1…un)` with same constructors, and index `i`,\nreturns `t = u |- ti = ui`."
    },
    {
      "name": "p.cstor-disj",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term",
        "Term"
      ],
      "doc": "Given terms `t1 := C1(…)` and `t2 := C2(…)` with distinct constructors,\n    returns `|- (t1 = t2) = false`."
    },
    {
      "name": "p.cstor-is-a-true",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term",
        "Term"
      ],
      "doc": "Given terms `is(C) t` and `v := C(…)`, prove `t = v |- is(C) t = true`."
    },
    {
      "name": "p.cstor-is-a-false",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term",
        "Term"
      ],
      "doc": "Given terms `is(C) t` and `v := C2(…)` with `C2` a distinct constructor,\n    prove `t = v |- is(C) t = false`."
    },
    {
      "name": "p.cstor-is-a-project",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "Given term `is-a(C,t)`, return `is-a(C,t) = true |- t = C(select(C,0,t), …)`"
    },
    {
      "name": "p.cstor-select",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term",
        "Term"
      ],
      "doc": "Given `t1 := select(C,i,u)` and `t2 := C(v1…vn)`, returns `u=t2 |- t1=v_i`"
    },
    {
      "name": "p.destruct",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term",
        "Term"
      ],
      "doc": "Given terms `t := destruct (C, i, sub_t)` and `u := C (v1…vn)`,\n    return `sub_t = u |- t = v_i`."
    },
    {
      "name": "p.and-true-left",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "`true && x --> x`"
    },
    {
      "name": "p.and-true-right",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "`x && true --> x`"
    },
    {
      "name": "p.and-false-left",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "`false && _ --> false`"
    },
    {
      "name": "p.and-false-right",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "`_  && false --> false`"
    },
    {
      "name": "p.and-refl",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "`x && x  --> x`"
    },
    {
      "name": "p.or-false-left",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "`false || x --> x`"
    },
    {
      "name": "p.or-false-right",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "`x || false --> x`"
    },
    {
      "name": "p.or-true-left",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "`true && _ --> true`"
    },
    {
      "name": "p.or-true-right",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "`_ || true  --> true`"
    },
    {
      "name": "p.or-refl",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "`x || x  --> x`"
    },
    {
      "name": "p.imply-true-right",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "`_ ==> true  --> true`"
    },
    {
      "name": "p.imply-true-left",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "`true ==> b  --> b`"
    },
    {
      "name": "p.imply-false-left",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "`false ==> _  --> true`"
    },
    {
      "name": "p.imply-false-right",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "`true ==> false  --> false`"
    },
    {
      "name": "p.imply-refl",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "`a ==> a  --> true`"
    },
    {
      "name": "p.neq",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "`|- (a <> b) = not (a=b)`"
    },
    {
      "name": "p.eq-const",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term",
        "Term"
      ],
      "doc": "Decides equality of constants: `|- (c1 = c2) = true/false`"
    },
    {
      "name": "p.double_neg_elim",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "`not (not a)  --> a`"
    },
    {
      "name": "p.eq_true_elim",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "a = true  --> a"
    },
    {
      "name": "p.eq_false_not",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "Term"
      ],
      "doc": "a = false --> not a"
    },
    {
      "name": "p.cut",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "ProofStep",
        [
          "List",
          "ProofStep"
        ]
      ],
      "doc": "Takes `A1…An,B |- G` and `C_i |- A_i` and returns `B, ,(C_i)_i |- G`."
    },
    {
      "name": "p.subst",
      "ret": "ProofStep",
      "args": [
        "Scope",
        "ProofStep",
        [
          "List",
          [
            "Tuple",
            "Var",
            "Term"
          ]
        ]
      ],
      "doc": "`C` and `σ` --> `Cσ`."
    },
    {
      "name": "m.cut",
      "ret": "MProofStep",
      "args": [
        "Scope",
        "MProofStep",
        [
          "List",
          "MProofStep"
        ]
      ],
      "doc": "Takes `A1…An,B ||- G` and `C_i ||- A_i` and returns `B, ,(C_i)_i ||- G`."
    },
    {
      "name": "m.intro",
      "ret": "MProofStep",
      "args": [
        "Scope",
        "ProofStep"
      ],
      "doc": "Takes `A |- B` and returns `C1, C2 …, Cn ||- (A|-B)`, where `C_i` are the assumptions in the current scope."
    },
    {
      "name": "m.subst",
      "ret": "MProofStep",
      "args": [
        "Scope",
        "MProofStep",
        [
          "List",
          [
            "Tuple",
            "Var",
            "Term"
          ]
        ]
      ],
      "doc": "`A1… An ||- C` and `σ` --> `A1…An ||- Cσ`."
    }
  ],
  "builtin_symbols": [
    {
      "name": "Bool",
      "args": [],
      "ret": "Type"
    },
    {
      "name": "Int",
      "args": [],
      "ret": "Type"
    },
    {
      "name": "Rational",
      "args": [],
      "ret": "Type"
    },
    {
      "name": "not",
      "args": [
        "Bool"
      ],
      "ret": "Bool"
    },
    {
      "name": "and",
      "args": [
        "Bool",
        "Bool"
      ],
      "ret": "Bool"
    },
    {
      "name": "or",
      "args": [
        "Bool",
        "Bool"
      ],
      "ret": "Bool"
    },
    {
      "name": "=>",
      "args": [
        "Bool",
        "Bool"
      ],
      "ret": "Bool"
    },
    {
      "name": "=",
      "params": [
        "A"
      ],
      "args": [
        "A",
        "A"
      ],
      "ret": "Bool"
    }
  ]
}
