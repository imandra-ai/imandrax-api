// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.2
// source: task.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "imandrax.task";

export enum TaskKind {
  TASK_UNSPECIFIED = 0,
  TASK_EVAL = 1,
  TASK_CHECK_PO = 2,
  TASK_PROOF_CHECK = 3,
  TASK_DECOMP = 4,
  UNRECOGNIZED = -1,
}

export function taskKindFromJSON(object: any): TaskKind {
  switch (object) {
    case 0:
    case "TASK_UNSPECIFIED":
      return TaskKind.TASK_UNSPECIFIED;
    case 1:
    case "TASK_EVAL":
      return TaskKind.TASK_EVAL;
    case 2:
    case "TASK_CHECK_PO":
      return TaskKind.TASK_CHECK_PO;
    case 3:
    case "TASK_PROOF_CHECK":
      return TaskKind.TASK_PROOF_CHECK;
    case 4:
    case "TASK_DECOMP":
      return TaskKind.TASK_DECOMP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TaskKind.UNRECOGNIZED;
  }
}

export function taskKindToJSON(object: TaskKind): string {
  switch (object) {
    case TaskKind.TASK_UNSPECIFIED:
      return "TASK_UNSPECIFIED";
    case TaskKind.TASK_EVAL:
      return "TASK_EVAL";
    case TaskKind.TASK_CHECK_PO:
      return "TASK_CHECK_PO";
    case TaskKind.TASK_PROOF_CHECK:
      return "TASK_PROOF_CHECK";
    case TaskKind.TASK_DECOMP:
      return "TASK_DECOMP";
    case TaskKind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface TaskID {
  /** The task identifier. */
  id: string;
}

export interface Task {
  id: TaskID | undefined;
  kind: TaskKind;
}

/** / Origin of some tasks */
export interface Origin {
  /** / Symbol from which the task originated */
  fromSym: string;
  /** / A counter for tasks for this symbol */
  count: number;
}

function createBaseTaskID(): TaskID {
  return { id: "" };
}

export const TaskID: MessageFns<TaskID> = {
  encode(message: TaskID, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskID {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskID();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskID {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: TaskID): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskID>, I>>(base?: I): TaskID {
    return TaskID.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskID>, I>>(object: I): TaskID {
    const message = createBaseTaskID();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseTask(): Task {
  return { id: undefined, kind: 0 };
}

export const Task: MessageFns<Task> = {
  encode(message: Task, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      TaskID.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.kind !== 0) {
      writer.uint32(16).int32(message.kind);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Task {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTask();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = TaskID.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Task {
    return {
      id: isSet(object.id) ? TaskID.fromJSON(object.id) : undefined,
      kind: isSet(object.kind) ? taskKindFromJSON(object.kind) : 0,
    };
  },

  toJSON(message: Task): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = TaskID.toJSON(message.id);
    }
    if (message.kind !== 0) {
      obj.kind = taskKindToJSON(message.kind);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Task>, I>>(base?: I): Task {
    return Task.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Task>, I>>(object: I): Task {
    const message = createBaseTask();
    message.id = (object.id !== undefined && object.id !== null) ? TaskID.fromPartial(object.id) : undefined;
    message.kind = object.kind ?? 0;
    return message;
  },
};

function createBaseOrigin(): Origin {
  return { fromSym: "", count: 0 };
}

export const Origin: MessageFns<Origin> = {
  encode(message: Origin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fromSym !== "") {
      writer.uint32(10).string(message.fromSym);
    }
    if (message.count !== 0) {
      writer.uint32(16).int32(message.count);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Origin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrigin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fromSym = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Origin {
    return {
      fromSym: isSet(object.fromSym) ? globalThis.String(object.fromSym) : "",
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
    };
  },

  toJSON(message: Origin): unknown {
    const obj: any = {};
    if (message.fromSym !== "") {
      obj.fromSym = message.fromSym;
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Origin>, I>>(base?: I): Origin {
    return Origin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Origin>, I>>(object: I): Origin {
    const message = createBaseOrigin();
    message.fromSym = object.fromSym ?? "";
    message.count = object.count ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
