// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.2
// source: system.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Empty } from "./utils.js";

export const protobufPackage = "imandrax.system";

export interface GcStats {
  heapSizeB: number;
  majorCollections: number;
  minorCollections: number;
}

export interface VersionResponse {
  version: string;
  gitVersion?: string | undefined;
}

function createBaseGcStats(): GcStats {
  return { heapSizeB: 0, majorCollections: 0, minorCollections: 0 };
}

export const GcStats: MessageFns<GcStats> = {
  encode(message: GcStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.heapSizeB !== 0) {
      writer.uint32(8).int64(message.heapSizeB);
    }
    if (message.majorCollections !== 0) {
      writer.uint32(16).int64(message.majorCollections);
    }
    if (message.minorCollections !== 0) {
      writer.uint32(24).int64(message.minorCollections);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GcStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGcStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.heapSizeB = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.majorCollections = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.minorCollections = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GcStats {
    return {
      heapSizeB: isSet(object.heapSizeB) ? globalThis.Number(object.heapSizeB) : 0,
      majorCollections: isSet(object.majorCollections) ? globalThis.Number(object.majorCollections) : 0,
      minorCollections: isSet(object.minorCollections) ? globalThis.Number(object.minorCollections) : 0,
    };
  },

  toJSON(message: GcStats): unknown {
    const obj: any = {};
    if (message.heapSizeB !== 0) {
      obj.heapSizeB = Math.round(message.heapSizeB);
    }
    if (message.majorCollections !== 0) {
      obj.majorCollections = Math.round(message.majorCollections);
    }
    if (message.minorCollections !== 0) {
      obj.minorCollections = Math.round(message.minorCollections);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GcStats>, I>>(base?: I): GcStats {
    return GcStats.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GcStats>, I>>(object: I): GcStats {
    const message = createBaseGcStats();
    message.heapSizeB = object.heapSizeB ?? 0;
    message.majorCollections = object.majorCollections ?? 0;
    message.minorCollections = object.minorCollections ?? 0;
    return message;
  },
};

function createBaseVersionResponse(): VersionResponse {
  return { version: "", gitVersion: undefined };
}

export const VersionResponse: MessageFns<VersionResponse> = {
  encode(message: VersionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    if (message.gitVersion !== undefined) {
      writer.uint32(18).string(message.gitVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VersionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gitVersion = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VersionResponse {
    return {
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      gitVersion: isSet(object.gitVersion) ? globalThis.String(object.gitVersion) : undefined,
    };
  },

  toJSON(message: VersionResponse): unknown {
    const obj: any = {};
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.gitVersion !== undefined) {
      obj.gitVersion = message.gitVersion;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VersionResponse>, I>>(base?: I): VersionResponse {
    return VersionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VersionResponse>, I>>(object: I): VersionResponse {
    const message = createBaseVersionResponse();
    message.version = object.version ?? "";
    message.gitVersion = object.gitVersion ?? undefined;
    return message;
  },
};

/** / Service returning data about the ImandraX system itself. */
export interface System {
  /** / Return the system's version */
  version(request: Empty): Promise<VersionResponse>;
  /** / Capture GC statistics */
  gc_stats(request: Empty): Promise<GcStats>;
  /** / Try to free memory, return stats */
  release_memory(request: Empty): Promise<GcStats>;
}

export const SystemServiceName = "imandrax.system.System";
export class SystemClientImpl implements System {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || SystemServiceName;
    this.rpc = rpc;
    this.version = this.version.bind(this);
    this.gc_stats = this.gc_stats.bind(this);
    this.release_memory = this.release_memory.bind(this);
  }
  version(request: Empty): Promise<VersionResponse> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "version", data);
    return promise.then((data) => VersionResponse.decode(new BinaryReader(data)));
  }

  gc_stats(request: Empty): Promise<GcStats> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "gc_stats", data);
    return promise.then((data) => GcStats.decode(new BinaryReader(data)));
  }

  release_memory(request: Empty): Promise<GcStats> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "release_memory", data);
    return promise.then((data) => GcStats.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
