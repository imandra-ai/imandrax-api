// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.1
// source: session.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Empty } from "./utils";

export const protobufPackage = "imandrax.session";

/** A session identifier. */
export interface Session {
  /** The session's unique ID (e.g a uuid). */
  id: string;
}

export interface SessionCreate {
  /** / Do we check Proof Obligations? Default true. */
  poCheck?:
    | boolean
    | undefined;
  /** the API types version (mandatory) */
  apiVersion: string;
}

/** / Reconnect to the given session */
export interface SessionOpen {
  id:
    | Session
    | undefined;
  /** the API types version (mandatory) */
  apiVersion: string;
}

function createBaseSession(): Session {
  return { id: "" };
}

export const Session: MessageFns<Session> = {
  encode(message: Session, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Session {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSession();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Session {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: Session): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Session>, I>>(base?: I): Session {
    return Session.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Session>, I>>(object: I): Session {
    const message = createBaseSession();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseSessionCreate(): SessionCreate {
  return { poCheck: undefined, apiVersion: "" };
}

export const SessionCreate: MessageFns<SessionCreate> = {
  encode(message: SessionCreate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.poCheck !== undefined) {
      writer.uint32(8).bool(message.poCheck);
    }
    if (message.apiVersion !== "") {
      writer.uint32(18).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionCreate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionCreate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.poCheck = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionCreate {
    return {
      poCheck: isSet(object.poCheck) ? globalThis.Boolean(object.poCheck) : undefined,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: SessionCreate): unknown {
    const obj: any = {};
    if (message.poCheck !== undefined) {
      obj.poCheck = message.poCheck;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionCreate>, I>>(base?: I): SessionCreate {
    return SessionCreate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionCreate>, I>>(object: I): SessionCreate {
    const message = createBaseSessionCreate();
    message.poCheck = object.poCheck ?? undefined;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

function createBaseSessionOpen(): SessionOpen {
  return { id: undefined, apiVersion: "" };
}

export const SessionOpen: MessageFns<SessionOpen> = {
  encode(message: SessionOpen, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      Session.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.apiVersion !== "") {
      writer.uint32(18).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionOpen {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionOpen();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = Session.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionOpen {
    return {
      id: isSet(object.id) ? Session.fromJSON(object.id) : undefined,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: SessionOpen): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Session.toJSON(message.id);
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionOpen>, I>>(base?: I): SessionOpen {
    return SessionOpen.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionOpen>, I>>(object: I): SessionOpen {
    const message = createBaseSessionOpen();
    message.id = (object.id !== undefined && object.id !== null) ? Session.fromPartial(object.id) : undefined;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

export interface SessionManager {
  /** Create a new session. */
  create_session(request: SessionCreate): Promise<Session>;
  /** Open an existing session, ie fail if it's not existing */
  open_session(request: SessionOpen): Promise<Empty>;
  /** Terminate a session, do nothing if it doesn't exist */
  end_session(request: Session): Promise<Empty>;
  /** / Make sure the session remains active */
  keep_session_alive(request: Session): Promise<Empty>;
}

export const SessionManagerServiceName = "imandrax.session.SessionManager";
export class SessionManagerClientImpl implements SessionManager {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || SessionManagerServiceName;
    this.rpc = rpc;
    this.create_session = this.create_session.bind(this);
    this.open_session = this.open_session.bind(this);
    this.end_session = this.end_session.bind(this);
    this.keep_session_alive = this.keep_session_alive.bind(this);
  }
  create_session(request: SessionCreate): Promise<Session> {
    const data = SessionCreate.encode(request).finish();
    const promise = this.rpc.request(this.service, "create_session", data);
    return promise.then((data) => Session.decode(new BinaryReader(data)));
  }

  open_session(request: SessionOpen): Promise<Empty> {
    const data = SessionOpen.encode(request).finish();
    const promise = this.rpc.request(this.service, "open_session", data);
    return promise.then((data) => Empty.decode(new BinaryReader(data)));
  }

  end_session(request: Session): Promise<Empty> {
    const data = Session.encode(request).finish();
    const promise = this.rpc.request(this.service, "end_session", data);
    return promise.then((data) => Empty.decode(new BinaryReader(data)));
  }

  keep_session_alive(request: Session): Promise<Empty> {
    const data = Session.encode(request).finish();
    const promise = this.rpc.request(this.service, "keep_session_alive", data);
    return promise.then((data) => Empty.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
