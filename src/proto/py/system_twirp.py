# -*- coding: utf-8 -*-
# Generated by https://github.com/verloop/twirpy/protoc-gen-twirpy.  DO NOT EDIT!
# source: system.proto

from google.protobuf import symbol_database as _symbol_database

from twirp.base import Endpoint
from twirp.server import TwirpServer
from twirp.client import TwirpClient
try:
	from twirp.async_client import AsyncTwirpClient
	_async_available = True
except ModuleNotFoundError:
	_async_available = False

_sym_db = _symbol_database.Default()

class SystemServer(TwirpServer):

	def __init__(self, *args, service, server_path_prefix="/twirp"):
		super().__init__(service=service)
		self._prefix = F"{server_path_prefix}/.System"
		self._endpoints = {
			"version": Endpoint(
				service_name="System",
				name="version",
				function=getattr(service, "version"),
				input=_sym_db.GetSymbol("Empty"),
				output=_sym_db.GetSymbol("VersionResponse"),
			),
			"gc_stats": Endpoint(
				service_name="System",
				name="gc_stats",
				function=getattr(service, "gc_stats"),
				input=_sym_db.GetSymbol("Empty"),
				output=_sym_db.GetSymbol("Gc_stats"),
			),
			"release_memory": Endpoint(
				service_name="System",
				name="release_memory",
				function=getattr(service, "release_memory"),
				input=_sym_db.GetSymbol("Empty"),
				output=_sym_db.GetSymbol("Gc_stats"),
			),
		}

class SystemClient(TwirpClient):

	def version(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/.System/version",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("VersionResponse"),
			**kwargs,
		)

	def gc_stats(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/.System/gc_stats",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("Gc_stats"),
			**kwargs,
		)

	def release_memory(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/.System/release_memory",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("Gc_stats"),
			**kwargs,
		)


if _async_available:
	class AsyncSystemClient(AsyncTwirpClient):

		async def version(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/.System/version",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("VersionResponse"),
				session=session,
				**kwargs,
			)

		async def gc_stats(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/.System/gc_stats",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("Gc_stats"),
				session=session,
				**kwargs,
			)

		async def release_memory(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/.System/release_memory",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("Gc_stats"),
				session=session,
				**kwargs,
			)
