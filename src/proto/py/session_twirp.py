# -*- coding: utf-8 -*-
# Generated by https://github.com/verloop/twirpy/protoc-gen-twirpy.  DO NOT EDIT!
# source: session.proto

from google.protobuf import symbol_database as _symbol_database

from twirp.base import Endpoint
from twirp.server import TwirpServer
from twirp.client import TwirpClient
try:
	from twirp.async_client import AsyncTwirpClient
	_async_available = True
except ModuleNotFoundError:
	_async_available = False

_sym_db = _symbol_database.Default()

class SessionManagerServer(TwirpServer):

	def __init__(self, *args, service, server_path_prefix="/twirp"):
		super().__init__(service=service)
		self._prefix = F"{server_path_prefix}/imandrax.session.SessionManager"
		self._endpoints = {
			"create_session": Endpoint(
				service_name="SessionManager",
				name="create_session",
				function=getattr(service, "create_session"),
				input=_sym_db.GetSymbol("imandrax.session.SessionCreate"),
				output=_sym_db.GetSymbol("imandrax.session.Session"),
			),
			"open_session": Endpoint(
				service_name="SessionManager",
				name="open_session",
				function=getattr(service, "open_session"),
				input=_sym_db.GetSymbol("imandrax.session.SessionOpen"),
				output=_sym_db.GetSymbol("Empty"),
			),
			"keep_session_alive": Endpoint(
				service_name="SessionManager",
				name="keep_session_alive",
				function=getattr(service, "keep_session_alive"),
				input=_sym_db.GetSymbol("imandrax.session.Session"),
				output=_sym_db.GetSymbol("Empty"),
			),
		}

class SessionManagerClient(TwirpClient):

	def create_session(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/imandrax.session.SessionManager/create_session",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("imandrax.session.Session"),
			**kwargs,
		)

	def open_session(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/imandrax.session.SessionManager/open_session",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("Empty"),
			**kwargs,
		)

	def keep_session_alive(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/imandrax.session.SessionManager/keep_session_alive",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("Empty"),
			**kwargs,
		)


if _async_available:
	class AsyncSessionManagerClient(AsyncTwirpClient):

		async def create_session(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/imandrax.session.SessionManager/create_session",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("imandrax.session.Session"),
				session=session,
				**kwargs,
			)

		async def open_session(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/imandrax.session.SessionManager/open_session",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("Empty"),
				session=session,
				**kwargs,
			)

		async def keep_session_alive(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/imandrax.session.SessionManager/keep_session_alive",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("Empty"),
				session=session,
				**kwargs,
			)
