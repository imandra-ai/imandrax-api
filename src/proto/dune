(library
 (public_name imandrax-api.proto)
 (name imandrax_api_proto)
 (flags :standard)
 (libraries pbrt pbrt_yojson pbrt_services))

(rule
 (targets artmsg.ml artmsg.mli)
 (deps
  (:file artmsg.proto))
 (mode promote)
 (alias genproto)
 (action
  (run ocaml-protoc --ml_out=. --yojson --pp --binary --make %{file})))

(rule
 (alias genproto)
 (targets api.ml api.mli)
 (deps
  (:file api.proto))
 (mode promote)
 (action
  (run ocaml-protoc --ml_out=. --pp --binary --services --make %{file})))

(rule
 (alias genproto)
 (targets error.ml error.mli)
 (deps
  (:file error.proto))
 (mode promote)
 (action
  (run ocaml-protoc --ml_out=. --pp --binary --services --make %{file})))

(rule
 (alias genproto)
 (targets session.ml session.mli)
 (deps
  (:file session.proto))
 (mode promote)
 (action
  (run ocaml-protoc --ml_out=. --pp --binary --services --make %{file})))

(rule
 (alias genproto)
 (targets system.ml system.mli)
 (deps
  (:file system.proto))
 (mode promote)
 (action
  (run ocaml-protoc --ml_out=. --pp --binary --services --make %{file})))

(rule
 (alias genproto)
 (targets locs.ml locs.mli)
 (deps
  (:file locs.proto))
 (mode promote)
 (action
  (run ocaml-protoc --ml_out=. --pp --binary --services --make %{file})))

(rule
 (alias genproto)
 (targets task.ml task.mli)
 (deps
  (:file task.proto))
 (mode promote)
 (action
  (run ocaml-protoc --ml_out=. --pp --binary --services --make %{file})))

(rule
 (alias genproto)
 (targets utils.ml utils.mli)
 (deps
  (:file utils.proto))
 (mode promote)
 (action
  (run ocaml-protoc --ml_out=. --pp --binary --services --make %{file})))

(rule
 (alias genproto)
 (targets simple_api.ml simple_api.mli)
 (deps
  (:file simple_api.proto))
 (mode promote)
 (action
  (run ocaml-protoc --ml_out=. --pp --binary --services --make %{file})))
