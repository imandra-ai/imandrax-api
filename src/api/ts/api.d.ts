/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/session/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** create a new session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description A new session */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            session: components["schemas"]["session"];
                            current: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{session}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** delete this session */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    session: components["schemas"]["session"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description the session was properly deleted. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artifact/{taskid}/{kind}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get artifact of given kind */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    taskid: components["schemas"]["task_id"];
                    /** @description the kind of artifact */
                    kind: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The artifact was found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/octet-stream": string;
                        "application/zip": string;
                        "text/plain": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artifact/list/{taskid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** list available artifact kinds for this task */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    taskid: components["schemas"]["task_id"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description list of artifact kinds */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            kinds?: string[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eval/code/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** submit code to be evaluated in a session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["code_snippet"];
                };
            };
            responses: {
                /** @description Submitting code was successful (but code might contain errors) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["eval_res"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Session identifier */
        session: string;
        /** @description Task identifier */
        task_id: string;
        code_snippet: {
            session: components["schemas"]["session"];
            /** @description current state token */
            current: string;
            code: string;
        };
        /** @enum {string} */
        eval_res_kind: "ok" | "errors";
        /** @description Position in a code snippet */
        position: {
            line: number;
            col: number;
        };
        location: {
            file?: string;
            start?: components["schemas"]["position"];
            stop?: components["schemas"]["position"];
        };
        error_message: {
            message: string;
            locs?: components["schemas"]["location"][];
            backtrace?: string;
        };
        error: {
            msg: components["schemas"]["error_message"];
            kind: string;
            context?: components["schemas"]["error_message"][];
            process?: string;
        };
        /** @description Result for the evaluation endpoints */
        eval_res: {
            /** @description New current state */
            current: string;
            res: components["schemas"]["eval_res_kind"];
            duration_s: number;
            tasks?: components["schemas"]["task_id"][];
            errors?: components["schemas"]["error"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
