package generator

import "text/template"

type TwirpTemplateVariables struct {
	FileName string
	Services []*TwirpService
}

type TwirpService struct {
	ServiceURL string
	Name       string
	Comment    string
	Methods    []*TwirpMethod
}

type TwirpMethod struct {
	ServiceURL  string
	ServiceName string
	Name        string
	Comment     string
	Input       string
	Output      string
}

type TwirpImport struct {
	From   string
	Import string
}

// TwirpTemplate - Template for twirp server and client
var TwirpTemplate = template.Must(template.New("TwirpTemplate").Parse(`# -*- coding: utf-8 -*-
# Generated by https://github.com/verloop/twirpy/protoc-gen-twirpy.  DO NOT EDIT!
# source: {{.FileName}}

from google.protobuf import symbol_database as _symbol_database

from ..twirp.client import TwirpClient
try:
	from ..twirp.async_client import AsyncTwirpClient
	_async_available = True
except ImportError:
	_async_available = False

_sym_db = _symbol_database.Default()
{{range .Services}}

class {{.Name}}Client(TwirpClient):
{{range .Methods}}
	def {{.Name}}(self, *args, ctx, request, **kwargs):
		return self._make_request(
			url=F"{self._server_path_prefix}/{{.ServiceURL}}/{{.Name}}",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("{{.Output}}"),
			**kwargs,
		)
{{end}}

if _async_available:
	class Async{{.Name}}Client(AsyncTwirpClient):
{{range .Methods}}
		async def {{.Name}}(self, *, ctx, request, **kwargs):
			return await self._make_request(
				url=F"{self._server_path_prefix}/{{.ServiceURL}}/{{.Name}}",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("{{.Output}}"),
				**kwargs,
			)
{{end}}{{end}}`))
